{"ast":null,"code":"var _jsxFileName = \"/home/julie/game-challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      isLoading: true,\n      //    dateCut: '', \n      dataApi: []\n    };\n\n    this.getDate = () => {\n      //SELECT THE CURRENT DATE\n      var today = new Date();\n      today.setMonth(1, 25);\n      var dd = String(today.getDate()).padStart(2, '0');\n      var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n      var yyyy = today.getFullYear();\n      today = yyyy + '-' + mm + '-' + dd;\n      return today;\n    };\n  }\n\n  async componentDidMount() {\n    //insert the current date in the url so we only display \n    const {\n      data\n    } = await axios(`https://opentdb.com/api.php?amount=10&category=25&difficulty=medium&type=multiple`);\n    this.setState({\n      data,\n      isLoading: false,\n      //the last date of the api array for save it as the last day of the calendar picker\n      dateCut: data[data.length - 1].data_inici.substr(0, 10).split('-').join(',')\n    }); //Recover the dates start and end of the event and create an array of it. Then inser the array in a new array with the copy of the event object\n\n    const eventsLong = data.map((event, i) => {\n      return { ...event,\n        dates: getDateLongEvent(event.data_inici, event.data_fi)\n      };\n    }); //save in state this new array for use it in filters\n\n    this.setState({\n      dataApi: eventsLong\n    }); //CREATE AN ARRAY OF CITYS AFTER API IS LOADED\n\n    var arrayMunicipi = []; //Recover the cities from the api and push in a array\n\n    data.map(event => {\n      //only if we have info about the municipi save in an array the data string\n      if (event.comarca_i_municipi !== undefined) {\n        arrayMunicipi.push(event.comarca_i_municipi);\n      }\n\n      return arrayMunicipi;\n    }); //select only the cities once (not repited)\n\n    let valueCities = arrayMunicipi.reduce((total, city) => total.includes(city) ? total : [...total, city], []); //create a state for city value in filters select\n\n    this.setState({\n      valueCities: valueCities\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, this.state.isLoading ? /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 34\n      }\n    }) : /*#__PURE__*/React.createElement(FiltersNavbar, {\n      dataApi: this.state.dataApi,\n      dateCut: this.state.dateCut,\n      valueCities: this.state.valueCities,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 53\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/julie/game-challenge/src/App.js"],"names":["React","Component","axios","App","state","data","isLoading","dataApi","getDate","today","Date","setMonth","dd","String","padStart","mm","getMonth","yyyy","getFullYear","componentDidMount","setState","dateCut","length","data_inici","substr","split","join","eventsLong","map","event","i","dates","getDateLongEvent","data_fi","arrayMunicipi","comarca_i_municipi","undefined","push","valueCities","reduce","total","city","includes","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    data: {},\n    isLoading: true,\n//    dateCut: '', \n    dataApi:[]\n}\n\ngetDate = () => {\n  //SELECT THE CURRENT DATE\n  var today = new Date()\n  today.setMonth(1, 25);\n  var dd = String(today.getDate()).padStart(2, '0');\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  var yyyy = today.getFullYear();\n  today = yyyy + '-' + mm + '-' + dd;\n  return today;\n}\n\n\nasync componentDidMount(){\n    //insert the current date in the url so we only display \n  const {data} = await axios(`https://opentdb.com/api.php?amount=10&category=25&difficulty=medium&type=multiple`)\n  \n        this.setState({\n          data, \n          isLoading: false,\n          //the last date of the api array for save it as the last day of the calendar picker\n          dateCut: data[data.length-1].data_inici.substr(0,10).split('-').join(',')\n     \n         })\n\n    //Recover the dates start and end of the event and create an array of it. Then inser the array in a new array with the copy of the event object\n    const eventsLong= data.map((event, i)=>{\n    return ({...event,\n      dates: getDateLongEvent(event.data_inici, event.data_fi)\n    })\n   \n  })\n  //save in state this new array for use it in filters\n  this.setState({dataApi:eventsLong})\n\n//CREATE AN ARRAY OF CITYS AFTER API IS LOADED\n  var arrayMunicipi=[];\n  //Recover the cities from the api and push in a array\n  data.map((event)=>{\n    //only if we have info about the municipi save in an array the data string\n    if(event.comarca_i_municipi!== undefined){\n      arrayMunicipi.push(event.comarca_i_municipi)\n    }\n    return arrayMunicipi\n  })\n  //select only the cities once (not repited)\n  let valueCities = arrayMunicipi.reduce((total, city) => total.includes(city) ? total : [...total, city], [])\n  //create a state for city value in filters select\n  this.setState({valueCities:valueCities})\n}\n  render(){\n    return (\n      <div className=\"\">\n          {this.state.isLoading? <LoadingSpinner />:<FiltersNavbar dataApi={this.state.dataApi} dateCut={this.state.dateCut} valueCities={this.state.valueCities}/>}\n      </div>\n    );\n  }\n  }\nexport default App;\n"]},"metadata":{},"sourceType":"module"}