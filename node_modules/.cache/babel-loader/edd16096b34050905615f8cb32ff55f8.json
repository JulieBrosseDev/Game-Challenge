{"ast":null,"code":"var _jsxFileName = \"/home/julie/game-challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      isLoading: true,\n      //    dateCut: '', \n      dataApi: []\n    };\n  }\n\n  // getDate = () => {\n  //   //SELECT THE CURRENT DATE\n  //   var today = new Date()\n  //   today.setMonth(1, 25);\n  //   var dd = String(today.getDate()).padStart(2, '0');\n  //   var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  //   var yyyy = today.getFullYear();\n  //   today = yyyy + '-' + mm + '-' + dd;\n  //   return today;\n  // }\n  async componentDidMount() {\n    //insert the current date in the url so we only display \n    const {\n      data\n    } = await axios(`https://opentdb.com/api.php?amount=10`);\n    this.setState({\n      data,\n      isLoading: false //          categories: \n      //          dateCut: data[data.length-1].data_inici.substr(0,10).split('-').join(',')\n\n    });\n    console.log(data);\n\n    const getCategory = data => {\n      const firstResult = data.results[0];\n      const firstResultCategory = firstResult.category;\n      return firstResultCategory;\n    }; //Recover the dates start and end of the event and create an array of it. Then inser the array in a new array with the copy of the event object\n    //   const category= data.map((event, i)=>{\n    //   return ({...event,\n    //     categories: getCategories(event.category)\n    //   })\n    // })\n    //  })\n    //save in state this new array for use it in filters\n    //   this.setState({\n    //     })\n    // //CREATE AN ARRAY OF CITYS AFTER API IS LOADED\n    //   var arrayMunicipi=[];\n    //   //Recover the cities from the api and push in a array\n    //   data.map((event)=>{\n    //     //only if we have info about the municipi save in an array the data string\n    //     if(event.comarca_i_municipi!== undefined){\n    //       arrayMunicipi.push(event.comarca_i_municipi)\n    //     }\n    //     return arrayMunicipi\n    //   })\n    //   //select only the cities once (not repited)\n    //   let valueCities = arrayMunicipi.reduce((total, city) => total.includes(city) ? total : [...total, city], [])\n    //   //create a state for city value in filters select\n    //   this.setState({valueCities:valueCities})\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, this.state.isLoading ? \"IT DIDN'T LOAD\" : \"IT HAS LOADED\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/julie/game-challenge/src/App.js"],"names":["React","Component","axios","App","state","data","isLoading","dataApi","componentDidMount","setState","console","log","getCategory","firstResult","results","firstResultCategory","category","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGV;AACIC,MAAAA,OAAO,EAAC;AAJF,KADkB;AAAA;;AAS5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,QAAMC,iBAAN,GAAyB;AACrB;AACF,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAMH,KAAK,CAAE,uCAAF,CAA1B;AAEM,SAAKO,QAAL,CAAc;AACZJ,MAAAA,IADY;AAEZC,MAAAA,SAAS,EAAE,KAFC,CAGtB;AACA;;AAJsB,KAAd;AAQCI,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;;AAET,UAAMO,WAAW,GAAIP,IAAD,IAAU;AAC5B,YAAMQ,WAAW,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,CAApB;AACA,YAAMC,mBAAmB,GAAGF,WAAW,CAACG,QAAxC;AACA,aAAOD,mBAAP;AACD,KAJD,CAdyB,CAqBrB;AACF;AACA;AACA;AACA;AACA;AAEF;AACE;AACF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AAIAE,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKb,KAAL,CAAWE,SAAX,GACC,gBADD,GAEC,eAJN,CADF;AASD;;AAlFyB;;AAoF5B,eAAeH,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    data: {},\n    isLoading: true,\n//    dateCut: '', \n    dataApi:[]\n\n}\n\n// getDate = () => {\n//   //SELECT THE CURRENT DATE\n//   var today = new Date()\n//   today.setMonth(1, 25);\n//   var dd = String(today.getDate()).padStart(2, '0');\n//   var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n//   var yyyy = today.getFullYear();\n//   today = yyyy + '-' + mm + '-' + dd;\n//   return today;\n// }\n\n\nasync componentDidMount(){\n    //insert the current date in the url so we only display \n  const {data} = await axios(`https://opentdb.com/api.php?amount=10`)\n  \n        this.setState({\n          data, \n          isLoading: false,\n//          categories: \n//          dateCut: data[data.length-1].data_inici.substr(0,10).split('-').join(',')\n     \n         })\n\n         console.log(data)\n\nconst getCategory = (data) => {\n  const firstResult = data.results[0]\n  const firstResultCategory = firstResult.category\n  return firstResultCategory\n}\n\n\n    //Recover the dates start and end of the event and create an array of it. Then inser the array in a new array with the copy of the event object\n  //   const category= data.map((event, i)=>{\n  //   return ({...event,\n  //     categories: getCategories(event.category)\n  //   })\n  // })\n   \n//  })\n  //save in state this new array for use it in filters\n//   this.setState({\n//     })\n\n// //CREATE AN ARRAY OF CITYS AFTER API IS LOADED\n//   var arrayMunicipi=[];\n//   //Recover the cities from the api and push in a array\n//   data.map((event)=>{\n//     //only if we have info about the municipi save in an array the data string\n//     if(event.comarca_i_municipi!== undefined){\n//       arrayMunicipi.push(event.comarca_i_municipi)\n//     }\n//     return arrayMunicipi\n//   })\n//   //select only the cities once (not repited)\n//   let valueCities = arrayMunicipi.reduce((total, city) => total.includes(city) ? total : [...total, city], [])\n//   //create a state for city value in filters select\n//   this.setState({valueCities:valueCities})\n }\n\n\n\n  render(){\n    return (\n      <div className=\"\">\n        {/* {\"THE CATEGORY : \" + this.state.data.results} */}\n          {this.state.isLoading\n          ? \"IT DIDN'T LOAD\"\n          : \"IT HAS LOADED\"\n          }\n      </div>\n    );\n  }\n  }\nexport default App;\n"]},"metadata":{},"sourceType":"module"}