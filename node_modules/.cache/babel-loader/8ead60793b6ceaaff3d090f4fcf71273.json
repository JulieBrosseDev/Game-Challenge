{"ast":null,"code":"var _jsxFileName = \"/home/julie/game-challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      isLoading: true,\n      //    dateCut: '', \n      dataApi: []\n    };\n  }\n\n  // getDate = () => {\n  //   //SELECT THE CURRENT DATE\n  //   var today = new Date()\n  //   today.setMonth(1, 25);\n  //   var dd = String(today.getDate()).padStart(2, '0');\n  //   var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  //   var yyyy = today.getFullYear();\n  //   today = yyyy + '-' + mm + '-' + dd;\n  //   return today;\n  // }\n  async componentDidMount() {\n    //insert the current date in the url so we only display \n    const {\n      data\n    } = await axios(`https://opentdb.com/api.php?amount=10&category=25&difficulty=medium&type=multiple`);\n    this.setState({\n      data,\n      isLoading: false //the last date of the api array for save it as the last day of the calendar picker\n      //          dateCut: data[data.length-1].data_inici.substr(0,10).split('-').join(',')\n\n    }); //Recover the dates start and end of the event and create an array of it. Then inser the array in a new array with the copy of the event object\n    //    const eventsLong= data.map((event, i)=>{\n    //    return ({...event,\n    //      dates: getDateLongEvent(event.data_inici, event.data_fi)\n    //    })\n    //  })\n    //save in state this new array for use it in filters\n\n    this.setState({\n      dataApi: eventsLong\n    }); //CREATE AN ARRAY OF CITYS AFTER API IS LOADED\n\n    var arrayMunicipi = []; //Recover the cities from the api and push in a array\n\n    data.map(event => {\n      //only if we have info about the municipi save in an array the data string\n      if (event.comarca_i_municipi !== undefined) {\n        arrayMunicipi.push(event.comarca_i_municipi);\n      }\n\n      return arrayMunicipi;\n    }); //select only the cities once (not repited)\n\n    let valueCities = arrayMunicipi.reduce((total, city) => total.includes(city) ? total : [...total, city], []); //create a state for city value in filters select\n\n    this.setState({\n      valueCities: valueCities\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, this.state.isLoading ? \"THAT WORKS !!!\" : \"IT DIDN'T LOAD\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/julie/game-challenge/src/App.js"],"names":["React","Component","axios","App","state","data","isLoading","dataApi","componentDidMount","setState","eventsLong","arrayMunicipi","map","event","comarca_i_municipi","undefined","push","valueCities","reduce","total","city","includes","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGV;AACIC,MAAAA,OAAO,EAAC;AAJF,KADkB;AAAA;;AAQ5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,QAAMC,iBAAN,GAAyB;AACrB;AACF,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAMH,KAAK,CAAE,mFAAF,CAA1B;AAEM,SAAKO,QAAL,CAAc;AACZJ,MAAAA,IADY;AAEZC,MAAAA,SAAS,EAAE,KAFC,CAGZ;AACV;;AAJsB,KAAd,EAJiB,CAYrB;AACJ;AACA;AACA;AACA;AAEA;AACE;;AACA,SAAKG,QAAL,CAAc;AAACF,MAAAA,OAAO,EAACG;AAAT,KAAd,EApBuB,CAsBzB;;AACE,QAAIC,aAAa,GAAC,EAAlB,CAvBuB,CAwBvB;;AACAN,IAAAA,IAAI,CAACO,GAAL,CAAUC,KAAD,IAAS;AAChB;AACA,UAAGA,KAAK,CAACC,kBAAN,KAA4BC,SAA/B,EAAyC;AACvCJ,QAAAA,aAAa,CAACK,IAAd,CAAmBH,KAAK,CAACC,kBAAzB;AACD;;AACD,aAAOH,aAAP;AACD,KAND,EAzBuB,CAgCvB;;AACA,QAAIM,WAAW,GAAGN,aAAa,CAACO,MAAd,CAAqB,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,CAACE,QAAN,CAAeD,IAAf,IAAuBD,KAAvB,GAA+B,CAAC,GAAGA,KAAJ,EAAWC,IAAX,CAArE,EAAuF,EAAvF,CAAlB,CAjCuB,CAkCvB;;AACA,SAAKX,QAAL,CAAc;AAACQ,MAAAA,WAAW,EAACA;AAAb,KAAd;AACD;;AACCK,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKlB,KAAL,CAAWE,SAAX,GACC,gBADD,GAEC,gBAHN,CADF;AAQD;;AAlEyB;;AAoE5B,eAAeH,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    data: {},\n    isLoading: true,\n//    dateCut: '', \n    dataApi:[]\n}\n\n// getDate = () => {\n//   //SELECT THE CURRENT DATE\n//   var today = new Date()\n//   today.setMonth(1, 25);\n//   var dd = String(today.getDate()).padStart(2, '0');\n//   var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n//   var yyyy = today.getFullYear();\n//   today = yyyy + '-' + mm + '-' + dd;\n//   return today;\n// }\n\n\nasync componentDidMount(){\n    //insert the current date in the url so we only display \n  const {data} = await axios(`https://opentdb.com/api.php?amount=10&category=25&difficulty=medium&type=multiple`)\n  \n        this.setState({\n          data, \n          isLoading: false,\n          //the last date of the api array for save it as the last day of the calendar picker\n//          dateCut: data[data.length-1].data_inici.substr(0,10).split('-').join(',')\n     \n         })\n\n    //Recover the dates start and end of the event and create an array of it. Then inser the array in a new array with the copy of the event object\n//    const eventsLong= data.map((event, i)=>{\n//    return ({...event,\n//      dates: getDateLongEvent(event.data_inici, event.data_fi)\n//    })\n   \n//  })\n  //save in state this new array for use it in filters\n  this.setState({dataApi:eventsLong})\n\n//CREATE AN ARRAY OF CITYS AFTER API IS LOADED\n  var arrayMunicipi=[];\n  //Recover the cities from the api and push in a array\n  data.map((event)=>{\n    //only if we have info about the municipi save in an array the data string\n    if(event.comarca_i_municipi!== undefined){\n      arrayMunicipi.push(event.comarca_i_municipi)\n    }\n    return arrayMunicipi\n  })\n  //select only the cities once (not repited)\n  let valueCities = arrayMunicipi.reduce((total, city) => total.includes(city) ? total : [...total, city], [])\n  //create a state for city value in filters select\n  this.setState({valueCities:valueCities})\n}\n  render(){\n    return (\n      <div className=\"\">\n          {this.state.isLoading\n          ? \"THAT WORKS !!!\"\n          : \"IT DIDN'T LOAD\"\n          }\n      </div>\n    );\n  }\n  }\nexport default App;\n"]},"metadata":{},"sourceType":"module"}